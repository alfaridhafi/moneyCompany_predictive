# -*- coding: utf-8 -*-
"""Untitled30.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KbZadvV8DpITEUFobIcvBwElEhXHUZCF
"""

!pip install opendatasets

import opendatasets as od
import pandas as pd


od.download(
    "https://www.kaggle.com/datasets/programmerrdai/-big-company-money")

df = pd.read_csv('/content/-big-company-money/companiesmarketcap.com - Companies ranked by earnings - CompaniesMarketCap.com.csv')
money = df.rename(columns={'price (USD)': 'price', 'earnings_ttm': 'earnings'})
money

money.info()

"""### **Exploratory Data Analysis (EDA)**
#### Deskripsi Variabel
1.   Rank : ranking perusahaan secara global
2.   Name : nama perusahaan tersebut
3.   symbol : simbol perusahaan tersebut
4.   earnings: pendapatan perusahaan tersebut
5.   price : harga yang ditetapkan perusahaan terkait produk nya
6.   Country : negara perushaan tersebut



"""

#pengecekan apakah data yang kosong
money.isnull().sum()

#exploratory statistic information

money.describe()

"""dari nilai minimum tersebut, pada kolom price nilainya adalah 0, jadi ada kemungkinan bahwa terdapat missing value

"""

#kita cek berapa missing value pada data tersebut

price = (money.price == 0).sum()

print(price)

#selanjutnya kita cek dimanakah data yang bernilai 0 tersebut

money.loc[(money['price']==0)]

#selanjutnya kita drop nilai 'price' yang bernilai 0 tersebut

money = money.loc[(money[['price']]!=0).all(axis=1)]

money.shape

money.describe()

"""sekarang dari data tersebut sudah tidak ada lagi missing value"""

#sekarang mari kita coba tangani outlier nya
import seaborn as sns

Q1 = money.quantile(0.25)
Q3 = money.quantile(0.75)
IQR=Q3-Q1
money=money[~((money<(Q1-1.5*IQR))|(money>(Q3+1.5*IQR))).any(axis=1)]
     
# Cek ukuran dataset setelah kita drop outliers
money.shape

"""selanjutnya mari kita pisahkan data yang numeric dan categorical


"""

numeric = ['Rank', 'earnings', 'price']
categorical = ['Name', 'Symbol', 'country']

"""Univariate Analysis"""

#karena tipe data categorical ini bermacam-macam, maka pembagiannya tidak akan teratur. jadi disini saya langsung melihat histogram dari numerical
import matplotlib.pyplot as plt
money.hist(bins=50, figsize=(20,15))
plt.show()

"""Multivariate Analysis"""

sns.pairplot(money[numeric], diag_kind = 'kde')

plt.figure(figsize=(10, 8))
correlation_matrix = money[numeric].corr().round(2)
     
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)
plt.show()

"""**SPLIT DATASET**"""

from sklearn.model_selection import train_test_split

X = money[numeric].drop(['price'],axis =1)
y = money['price']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 123)
                                                    
print(f'total x: {len(X)}')
print(f'total x_train: {len(X_train)}')
print(f'total x_test: {len(X_test)}')

"""**Standarisasi**"""

from sklearn.preprocessing import StandardScaler
     
numerical = ['Rank','earnings']
scaler = StandardScaler()
scaler.fit(X_train[numerical])
X_train[numerical] = scaler.transform(X_train.loc[:, numerical])
X_train[numerical].head()

X_train[numerical].describe().round(4)

"""**Modeling**"""

#model dataFrame

models = pd.DataFrame(index=['train_mse', 'test_mse'], 
                      columns=['KNN', 'RandomForest', 'Boosting'])

#KNN
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error



knn = KNeighborsRegressor(n_neighbors = 5)
knn.fit(X_train, y_train)

models.loc['train_mse','KNN'] = mean_squared_error(y_pred = knn.predict(X_train), y_true=y_train)

# #RF

from sklearn.ensemble import RandomForestRegressor

RF = RandomForestRegressor(n_estimators=20, max_depth=10, random_state=10, n_jobs=-1)
RF.fit(X_train, y_train)

models.loc['train_mse','RandomForest'] = mean_squared_error(y_pred = RF.predict(X_train), y_true=y_train)

# boosting

from sklearn.ensemble import AdaBoostRegressor
     
boosting = AdaBoostRegressor(learning_rate=0.01, random_state=20)                             
boosting.fit(X_train, y_train)
models.loc['train_mse','Boosting'] = mean_squared_error(y_pred=boosting.predict(X_train), y_true=y_train)

"""**Model Evaluation**"""

X_test.loc[:, numerical] = scaler.transform(X_test[numerical])

mse = pd.DataFrame(columns=['train', 'test'], index=['KNN','RF','Boosting'])

model_dict = {
              'KNN': knn, 
              'RF': RF, 
              'Boosting': boosting
              }

for name, model in model_dict.items():
  mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))/1e3
  mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))/1e3
  
mse

mse.sort_values(by ='test', ascending = False).plot(kind='bar',zorder=3)

prediksi = X_test.iloc[:1].copy()
pred_dict = {'y_true':y_test[:1]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)
     
pd.DataFrame(pred_dict)

"""Dari hasil evaluasi tersebut, didapatkan informasi bahwa model dengan KNN memiliki performa yang paling besar"""